// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Event = Event || {};

/**
 * @constructor
 */
Event.PlayerSnapshot = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Event.PlayerSnapshot}
 */
Event.PlayerSnapshot.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Event.PlayerSnapshot=} obj
 * @returns {Event.PlayerSnapshot}
 */
Event.PlayerSnapshot.getRootAsPlayerSnapshot = function(bb, obj) {
  return (obj || new Event.PlayerSnapshot).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {boolean}
 */
Event.PlayerSnapshot.bufferHasIdentifier = function(bb) {
  return bb.__has_identifier('PLSP');
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Event.PlayerSnapshot.prototype.id = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
Event.PlayerSnapshot.prototype.sequence = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
Event.PlayerSnapshot.prototype.x = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
Event.PlayerSnapshot.prototype.y = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns {number}
 */
Event.PlayerSnapshot.prototype.rotation = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {number} index
 * @param {Event.PlayerShotSnapshot=} obj
 * @returns {Event.PlayerShotSnapshot}
 */
Event.PlayerSnapshot.prototype.shots = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new Event.PlayerShotSnapshot).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
Event.PlayerSnapshot.prototype.shotsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Event.PlayerSnapshot.startPlayerSnapshot = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} idOffset
 */
Event.PlayerSnapshot.addId = function(builder, idOffset) {
  builder.addFieldOffset(0, idOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sequence
 */
Event.PlayerSnapshot.addSequence = function(builder, sequence) {
  builder.addFieldInt32(1, sequence, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 */
Event.PlayerSnapshot.addX = function(builder, x) {
  builder.addFieldFloat32(2, x, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} y
 */
Event.PlayerSnapshot.addY = function(builder, y) {
  builder.addFieldFloat32(3, y, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} rotation
 */
Event.PlayerSnapshot.addRotation = function(builder, rotation) {
  builder.addFieldFloat32(4, rotation, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} shotsOffset
 */
Event.PlayerSnapshot.addShots = function(builder, shotsOffset) {
  builder.addFieldOffset(5, shotsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
Event.PlayerSnapshot.createShotsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Event.PlayerSnapshot.startShotsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Event.PlayerSnapshot.endPlayerSnapshot = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Event.PlayerSnapshot.finishPlayerSnapshotBuffer = function(builder, offset) {
  builder.finish(offset, 'PLSP');
};

// Exports for Node.js and RequireJS
this.Event = Event;
