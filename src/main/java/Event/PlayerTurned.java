// automatically generated by the FlatBuffers compiler, do not modify

package Event;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PlayerTurned extends Table {
  public static PlayerTurned getRootAsPlayerTurned(ByteBuffer _bb) { return getRootAsPlayerTurned(_bb, new PlayerTurned()); }
  public static PlayerTurned getRootAsPlayerTurned(ByteBuffer _bb, PlayerTurned obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PlayerTurnedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "PLTR"); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public PlayerTurned __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int id() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public boolean mutateId(int id) { int o = __offset(4); if (o != 0) { bb.putInt(o + bb_pos, id); return true; } else { return false; } }
  public float x() { int o = __offset(6); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean mutateX(float x) { int o = __offset(6); if (o != 0) { bb.putFloat(o + bb_pos, x); return true; } else { return false; } }
  public float y() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean mutateY(float y) { int o = __offset(8); if (o != 0) { bb.putFloat(o + bb_pos, y); return true; } else { return false; } }
  public float rotation() { int o = __offset(10); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean mutateRotation(float rotation) { int o = __offset(10); if (o != 0) { bb.putFloat(o + bb_pos, rotation); return true; } else { return false; } }
  public float angularVelocity() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public boolean mutateAngularVelocity(float angularVelocity) { int o = __offset(12); if (o != 0) { bb.putFloat(o + bb_pos, angularVelocity); return true; } else { return false; } }

  public static int createPlayerTurned(FlatBufferBuilder builder,
      int id,
      float x,
      float y,
      float rotation,
      float angularVelocity) {
    builder.startObject(5);
    PlayerTurned.addAngularVelocity(builder, angularVelocity);
    PlayerTurned.addRotation(builder, rotation);
    PlayerTurned.addY(builder, y);
    PlayerTurned.addX(builder, x);
    PlayerTurned.addId(builder, id);
    return PlayerTurned.endPlayerTurned(builder);
  }

  public static void startPlayerTurned(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(0, id, 0); }
  public static void addX(FlatBufferBuilder builder, float x) { builder.addFloat(1, x, 0.0f); }
  public static void addY(FlatBufferBuilder builder, float y) { builder.addFloat(2, y, 0.0f); }
  public static void addRotation(FlatBufferBuilder builder, float rotation) { builder.addFloat(3, rotation, 0.0f); }
  public static void addAngularVelocity(FlatBufferBuilder builder, float angularVelocity) { builder.addFloat(4, angularVelocity, 0.0f); }
  public static int endPlayerTurned(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishPlayerTurnedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "PLTR"); }
}

