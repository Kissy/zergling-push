// automatically generated by the FlatBuffers compiler, do not modify

package fr.kissy.zergling_push.event;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PlayerMoved extends Table {
  public static PlayerMoved getRootAsPlayerMoved(ByteBuffer _bb) { return getRootAsPlayerMoved(_bb, new PlayerMoved()); }
  public static PlayerMoved getRootAsPlayerMoved(ByteBuffer _bb, PlayerMoved obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PlayerMovedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "PLMV"); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public PlayerMoved __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public long time() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public float duration() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long sequence() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public byte velocity() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte angularVelocity() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public boolean firing() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createPlayerMoved(FlatBufferBuilder builder,
      int idOffset,
      long time,
      float duration,
      long sequence,
      byte velocity,
      byte angularVelocity,
      boolean firing) {
    builder.startObject(7);
    PlayerMoved.addSequence(builder, sequence);
    PlayerMoved.addDuration(builder, duration);
    PlayerMoved.addTime(builder, time);
    PlayerMoved.addId(builder, idOffset);
    PlayerMoved.addFiring(builder, firing);
    PlayerMoved.addAngularVelocity(builder, angularVelocity);
    PlayerMoved.addVelocity(builder, velocity);
    return PlayerMoved.endPlayerMoved(builder);
  }

  public static void startPlayerMoved(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addTime(FlatBufferBuilder builder, long time) { builder.addInt(1, (int)time, (int)0L); }
  public static void addDuration(FlatBufferBuilder builder, float duration) { builder.addFloat(2, duration, 0.0f); }
  public static void addSequence(FlatBufferBuilder builder, long sequence) { builder.addInt(3, (int)sequence, (int)0L); }
  public static void addVelocity(FlatBufferBuilder builder, byte velocity) { builder.addByte(4, velocity, 0); }
  public static void addAngularVelocity(FlatBufferBuilder builder, byte angularVelocity) { builder.addByte(5, angularVelocity, 0); }
  public static void addFiring(FlatBufferBuilder builder, boolean firing) { builder.addBoolean(6, firing, false); }
  public static int endPlayerMoved(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishPlayerMovedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "PLMV"); }
}

